 Rota/Recurso  
 Métodos HTTP:
    GET   : Buscar/Listar uma informacao no back-end
    POST  : Criar uma informacao no back-end
    PUT   : Alterar uma info no back-end
    DELETE: Deletar uma info no back-end


 
    Tipos de parametros:

    Query Params: Parametros nomeados enviados na rota após "?"(filtros, paginacao)
    Route Params: Parametros utilizados para identificar recursos ":id"
    Request Body: Corpo da requisicao, utilizado para criar ou alterar recursos


    O banco de dados que será utilizado é o SQL. Mais precisamente SQLite



    Driver: SELECT * FROM users
    Query Builder: table('users').select('*').where()  -- Vamos utilizar esse
                                    pois apesar do SQL ser uma linguagem "universal"
                                    existe diferenca de sintaxes em cada um. Com o query
                                    builder, não teremos esse problema ao mudar de banco SQL.

    Utilizacao do knexjs para utilizacao de query builder
        install sqlite3


    Normalmente a autenticacao vem atraves do Header da requisicao (contexto da requisicao)

    No metodo Index do IncidentController, é usado paginacao para nao retornar todos os Incidents de uma vez

    Enviado o numero total de incidents no header da response

    Instalacao do modulo CORS. Ele determina quem pode acessar a api.


    Utilização da biblioteca "celebrate" para fazer validações

    Para realizacao dos testes, é necessário um outro banco pra nao sujar o de "verdade", então para construir os mesmos
        foi alterado o knexjs copiando o banco de development alterando o nome e o filename
        Intalado o cross-env e alterado no package.json o script de test

        Instalacao do supertest para fazer as chamadas da API para realizacao dos tests

        PARA setar o header da requisicao para a realizacao de outros testes, se deve passar o .set :
                const response = await request(app)
                .post('/ongs')
                .set('Authorization', 'asd')
                .send({
                    name: "Ong",
                    email: "Ong@gmail.com",
                    whatsapp: "1140028922",
                    city: "Rio do Sul",
                    uf: "SC"
                });

    BACKEND
        Para testar deploys de aplicacoes experimentais, recomendasse o heroku (plano free)
        Digital ocean para comercial                  -- Ambos no canal da rocketseat

    FRONTEND
        netlifly


    Dicas de estudos pro futuro:
        Padroes de codigo: ESlint Prettier
        autenticacao JWT
        Styled Components